import unittest
from collector import collector


def get_points(coins, mags, n, path):
    mag = 0
    cur_i = 0
    points = 0
    for i, j in path[1:]:
        if i < 0 or j < 0 or i >= n or j >= n:
            return None
        if i != cur_i:
            cur_i = i
            mag = 0
        if coins[i][j]:
            points += 2 ** mag
        if mags[i][j]:
            mag += 1

    return points


def check(coins, mags, n, path, solution):
    print(get_points(coins, mags, n, path))
    return get_points(coins, mags, n, path) == solution


tests = [
    ([[0, 0, 1], [1, 1, 1], [0, 0, 1]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], 3, 4),
    ([[0, 0, 0, 0], [1, 1, 0, 0], [1, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 1, 1, 1]],
     4, 2),
    ([[0, 1, 1, 1], [0, 1, 1, 1], [0, 0, 1, 1], [1, 1, 0, 1]], [[0, 0, 0, 0], [1, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]],
     4, 8),
    ([[0, 0, 0, 1, 0], [0, 0, 0, 0, 1], [0, 0, 0, 1, 0], [0, 0, 0, 1, 0], [0, 0, 1, 0, 0]],
     [[0, 0, 0, 0, 1], [0, 0, 1, 1, 0], [0, 1, 1, 0, 1], [1, 0, 0, 0, 0], [0, 1, 0, 1, 0]], 5, 5),
    ([[0, 1, 0, 1, 1], [0, 1, 1, 0, 1], [0, 0, 1, 0, 1], [1, 1, 0, 1, 0], [1, 1, 1, 1, 1]],
     [[0, 0, 1, 0, 0], [1, 0, 0, 1, 0], [1, 1, 0, 1, 0], [0, 0, 1, 0, 1], [0, 0, 0, 0, 0]], 5, 13),
    ([[0, 1, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1, 1, 1],
      [1, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 0, 0, 0, 1, 1, 1, 1, 1, 1], [0, 1, 0, 0, 1, 1, 0, 1, 1, 1],
      [1, 1, 1, 0, 1, 1, 1, 0, 1, 1], [1, 1, 1, 1, 0, 1, 0, 1, 0, 1], [1, 0, 0, 1, 1, 0, 1, 0, 1, 1],
      [1, 0, 1, 0, 1, 1, 1, 0, 0, 1]],
     [[0, 0, 1, 0, 1, 0, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 0],
      [0, 0, 0, 0, 1, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 0],
      [0, 0, 0, 1, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0], [0, 1, 1, 0, 0, 1, 0, 1, 0, 0],
      [0, 1, 0, 1, 0, 0, 0, 1, 1, 0]], 10, 73),
    ([[0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [0, 1, 1, 0, 1, 1, 1, 1, 1, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1],
      [0, 1, 1, 1, 1, 1, 0, 1, 1, 0], [1, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0],
      [0, 1, 0, 0, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0, 1, 1], [0, 1, 1, 1, 1, 0, 1, 0, 1, 1],
      [1, 0, 1, 0, 1, 0, 0, 1, 0, 1]],
     [[0, 0, 1, 1, 1, 1, 0, 0, 0, 0], [1, 0, 0, 1, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 1, 1, 1, 1, 0, 0],
      [1, 0, 0, 0, 0, 0, 1, 0, 0, 1], [0, 1, 1, 1, 1, 1, 0, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1],
      [1, 0, 1, 1, 0, 0, 1, 0, 1, 0], [1, 1, 0, 1, 1, 0, 1, 1, 0, 0], [1, 0, 0, 0, 0, 1, 0, 1, 0, 0],
      [0, 1, 0, 1, 0, 1, 1, 0, 1, 0]], 10, 168),
    ([[0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0],
      [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1],
      [0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0],
      [1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1],
      [1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1],
      [1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1],
      [1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0],
      [0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1],
      [1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0],
      [1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1],
      [0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0],
      [0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0],
      [0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1],
      [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1],
      [0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1],
      [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1],
      [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0],
      [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1],
      [0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1]],
     [[0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1],
      [1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0],
      [1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1],
      [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0],
      [0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0],
      [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0],
      [0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1],
      [1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0],
      [0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1],
      [0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0],
      [1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1],
      [1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1],
      [1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1],
      [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0],
      [1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0],
      [1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0],
      [1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0],
      [1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1],
      [0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0],
      [1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0]], 20, 43278)
]


class TestCases(unittest.TestCase):
    def test_01(self):
        coins, mags, n, points = tests[0]
        print('solution points: ', points)
        path = collector(coins, mags, n)
        print('my path: ', path)
        self.assertTrue(check(coins, mags, n, path, points))

    def test_02(self):
        coins, mags, n, points = tests[1]
        path = collector(coins, mags, n)
        print('solution points: ', points)
        print('my path: ', path)
        self.assertTrue(check(coins, mags, n, path, points))

    def test_03(self):
        coins, mags, n, points = tests[2]
        path = collector(coins, mags, n)
        print('my path: ', path)
        self.assertTrue(check(coins, mags, n, path, points))

    def test_04(self):
        coins, mags, n, points = tests[3]
        path = collector(coins, mags, n)
        self.assertTrue(check(coins, mags, n, path, points))

    def test_05(self):
        coins, mags, n, points = tests[4]
        path = collector(coins, mags, n)
        self.assertTrue(check(coins, mags, n, path, points))

    def test_06(self):
        coins, mags, n, points = tests[5]
        path = collector(coins, mags, n)
        self.assertTrue(check(coins, mags, n, path, points))

    def test_07(self):
        coins, mags, n, points = tests[6]
        path = collector(coins, mags, n)
        self.assertTrue(check(coins, mags, n, path, points))

    def test_08(self):
        coins, mags, n, points = tests[7]
        path = collector(coins, mags, n)
        self.assertTrue(check(coins, mags, n, path, points))


if __name__ == "__main__":
    res = unittest.main(verbosity=3, exit=False)